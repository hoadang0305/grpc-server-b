// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package public

import (
	"github.com/google/wire"
	"github.com/hoadang0305/grpc-server-b/public/controller"
	"github.com/hoadang0305/grpc-server-b/public/controller/grpc"
	v1_2 "github.com/hoadang0305/grpc-server-b/public/controller/grpc/v1"
	"github.com/hoadang0305/grpc-server-b/public/controller/http"
	"github.com/hoadang0305/grpc-server-b/public/controller/http/v1"
	"github.com/hoadang0305/grpc-server-b/public/database"
	"github.com/hoadang0305/grpc-server-b/public/repository/implement"
	"github.com/hoadang0305/grpc-server-b/public/service/implement"
)

// Injectors from wire.go:

func InitializeContainer(db database.Db) *controller.ApiContainer {
	actorRepository := repositoryimplement.NewActorRepository(db)
	actorService := serviceimplement.NewActorService(actorRepository)
	actorHandler := v1.NewActorHandler(actorService)
	filmRepository := repositoryimplement.NewFilmRepository(db)
	filmService := serviceimplement.NewFilmService(filmRepository)
	filmHandler := v1.NewFilmHandler(filmService)
	server := http.NewServer(actorHandler, filmHandler)
	v1FilmHandler := v1_2.NewFilmHandler(filmService)
	grpcServer := grpc.NewServer(v1FilmHandler)
	apiContainer := controller.NewApiContainer(server, grpcServer)
	return apiContainer
}

// wire.go:

var container = wire.NewSet(controller.NewApiContainer)

// may have grpc server in the future
var serverSet = wire.NewSet(http.NewServer, grpc.NewServer)

// handler === controller | with service and repository layers to form 3 layers architecture
var handlerSet = wire.NewSet(v1.NewActorHandler, v1.NewFilmHandler, v1_2.NewFilmHandler)

var serviceSet = wire.NewSet(serviceimplement.NewActorService, serviceimplement.NewFilmService)

var repositorySet = wire.NewSet(repositoryimplement.NewActorRepository, repositoryimplement.NewFilmRepository)
